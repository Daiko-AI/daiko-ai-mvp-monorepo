import { inngest } from "../client";
import { events } from "../events";
import { initProposalAgentGraph } from "@daiko-ai/proposal-agent";
import { db, proposalTable, ProposalSelect, ProposalInsert } from "@daiko-ai/shared";

export const generateProposal = inngest.createFunction(
  { id: "generate-proposal" },
  { event: events.signalDetected },
  async ({ event, step }) => {
    const { userId } = event.data;
    // Initialize agent graph - Cast result after await
    const init = await step.run("init-agent", () => initProposalAgentGraph(userId));
    const agent = (init as any).agent; // Cast more safely if possible
    const config = (init as any).config;
    if (!agent || !config) {
      throw new Error("Agent initialization failed.");
    }

    // Execute agent to generate proposal - Cast result after await
    const runResult = await step.run("run-agent", () => agent.run(event.data, config));
    const proposal = (runResult as any).proposal as ProposalSelect | undefined; // Cast more safely if possible

    if (!proposal) {
      throw new Error("No proposal generated");
    }
    // Persist proposal to DB
    await step.run("save-proposal", async () => {
      // Prepare data explicitly for insertion, matching ProposalInsert type
      const insertData: ProposalInsert = {
        // id is generated by DB
        triggerEventId: event.id,
        userId: userId,
        title: proposal.title,
        summary: proposal.summary,
        reason: proposal.reason,
        sources: proposal.sources,
        type: proposal.type, // Ensure this is not null/undefined if DB requires it
        proposedBy: proposal.proposedBy, // Ensure this is not null/undefined if DB requires it
        financialImpact: proposal.financialImpact, // Ensure this is not null/undefined if DB requires it
        expires_at: proposal.expires_at,
        status: proposal.status ?? "active", // Provide default if needed
        contractCall: proposal.contractCall,
        // createdAt and updatedAt have defaults in schema
      };
      await db.insert(proposalTable).values(insertData);
    });
    // Emit proposal.created event
    await inngest.send({
      name: events.proposalCreated,
      data: { proposalId: proposal.id, userId }, // proposal.id should exist after insert if schema is correct
    });
    return { success: true };
  },
);
